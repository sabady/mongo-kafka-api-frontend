apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: default
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      - "alert_rules.yml"

    scrape_configs:
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name

      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

      - job_name: 'api-server'
        static_configs:
          - targets: ['api-server-service:3000']
        metrics_path: '/api/health/detailed'
        scrape_interval: 30s

      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-service:9101']
        scrape_interval: 30s

      - job_name: 'mongodb'
        static_configs:
          - targets: ['mongodb-service:27017']
        scrape_interval: 30s

  alert_rules.yml: |
    groups:
    - name: api-server-alerts
      rules:
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total{pod=~"api-server-.*"}[5m]) > 0.8
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage on API server"
          description: "API server pod {{ $labels.pod }} has high CPU usage"

      - alert: HighMemoryUsage
        expr: container_memory_usage_bytes{pod=~"api-server-.*"} / container_spec_memory_limit_bytes > 0.9
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage on API server"
          description: "API server pod {{ $labels.pod }} has high memory usage"

    - name: kafka-alerts
      rules:
      - alert: KafkaHighMessageRate
        expr: rate(kafka_messages_produced_total[5m]) > 1000
        for: 1m
        labels:
          severity: warning
        annotations:
          summary: "High Kafka message rate"
          description: "Kafka is producing messages at a high rate: {{ $value }} msg/s"

      - alert: KafkaConsumerLag
        expr: kafka_consumer_lag_sum > 1000
        for: 2m
        labels:
          severity: critical
        annotations:
          summary: "High Kafka consumer lag"
          description: "Kafka consumer lag is high: {{ $value }} messages"

    - name: mongodb-alerts
      rules:
      - alert: MongoDBHighConnections
        expr: mongodb_connections > 200
        for: 2m
        labels:
          severity: warning
        annotations:
          summary: "High MongoDB connections"
          description: "MongoDB has {{ $value }} active connections"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=200h'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
        resources:
          requests:
            cpu: 200m
            memory: 512Mi
          limits:
            cpu: 500m
            memory: 1Gi
        volumeMounts:
        - name: prometheus-config-volume
          mountPath: /etc/prometheus/
        - name: prometheus-storage-volume
          mountPath: /prometheus/
      volumes:
      - name: prometheus-config-volume
        configMap:
          defaultMode: 420
          name: prometheus-config
      - name: prometheus-storage-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: web
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-nodeport
  namespace: default
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - port: 9090
    targetPort: 9090
    name: web
    nodePort: 30090
  type: NodePort
