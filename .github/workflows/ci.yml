name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:coverage

    - name: Run integration tests
      run: npm run test:integration

    - name: Run E2E tests
      run: npm run test:e2e

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run frontend linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm run test:ci

    - name: Upload frontend coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build and Test Docker Images
  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to staging
      run: |
        export KUBECONFIG=kubeconfig
        # Update image tags in deployment files
        sed -i "s|api-server:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.sha }}|g" api-server-deployment.yaml
        sed -i "s|customer-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" frontend-deployment.yaml
        
        # Deploy to staging
        kubectl apply -f mongodb-*.yaml
        kubectl apply -f kafka-*.yaml
        kubectl apply -f api-server-*.yaml
        kubectl apply -f frontend-*.yaml
        kubectl apply -f *-hpa.yaml

    - name: Run smoke tests
      run: |
        export KUBECONFIG=kubeconfig
        # Wait for deployments to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/api-server
        kubectl wait --for=condition=available --timeout=300s deployment/frontend
        
        # Get service endpoints
        API_ENDPOINT=$(kubectl get service api-server-service-nodeport -o jsonpath='{.spec.clusterIP}')
        FRONTEND_ENDPOINT=$(kubectl get service frontend-service-nodeport -o jsonpath='{.spec.clusterIP}')
        
        # Run smoke tests
        curl -f http://$API_ENDPOINT:3000/health || exit 1
        curl -f http://$FRONTEND_ENDPOINT:80/health || exit 1

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Deploy to production
      run: |
        export KUBECONFIG=kubeconfig
        # Update image tags in deployment files
        sed -i "s|api-server:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.sha }}|g" api-server-deployment.yaml
        sed -i "s|customer-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.sha }}|g" frontend-deployment.yaml
        
        # Deploy to production with rolling update
        kubectl apply -f mongodb-*.yaml
        kubectl apply -f kafka-*.yaml
        kubectl apply -f api-server-*.yaml
        kubectl apply -f frontend-*.yaml
        kubectl apply -f *-hpa.yaml
        
        # Wait for rollout to complete
        kubectl rollout status deployment/api-server --timeout=600s
        kubectl rollout status deployment/frontend --timeout=600s

    - name: Run production health checks
      run: |
        export KUBECONFIG=kubeconfig
        # Get service endpoints
        API_ENDPOINT=$(kubectl get service api-server-service-nodeport -o jsonpath='{.spec.clusterIP}')
        FRONTEND_ENDPOINT=$(kubectl get service frontend-service-nodeport -o jsonpath='{.spec.clusterIP}')
        
        # Run health checks
        curl -f http://$API_ENDPOINT:3000/health || exit 1
        curl -f http://$FRONTEND_ENDPOINT:80/health || exit 1
        
        # Check autoscaling
        kubectl get hpa

    - name: Notify deployment success
      if: success()
      run: |
        echo "âœ… Production deployment successful!"
        echo "API Server: http://$API_ENDPOINT:3000"
        echo "Frontend: http://$FRONTEND_ENDPOINT:80"

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup kubectl
      uses: azure/setup-kubectl@v4
      with:
        version: 'v1.28.0'

    - name: Configure kubectl
      run: |
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
        export KUBECONFIG=kubeconfig

    - name: Rollback deployment
      run: |
        export KUBECONFIG=kubeconfig
        kubectl rollout undo deployment/api-server
        kubectl rollout undo deployment/frontend
        kubectl rollout status deployment/api-server --timeout=300s
        kubectl rollout status deployment/frontend --timeout=300s

    - name: Notify rollback
      run: |
        echo "ðŸ”„ Production deployment rolled back due to failure"
