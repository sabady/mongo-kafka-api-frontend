name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  build-release-images:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push backend release image
      uses: docker/build-push-action@v6
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest

    - name: Build and push frontend release image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  generate-artifacts:
    name: Generate Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Kubernetes manifests
      run: |
        # Create release directory
        mkdir -p release-artifacts
        
        # Copy all Kubernetes manifests
        cp *.yaml release-artifacts/
        cp frontend/*.yaml release-artifacts/ 2>/dev/null || true
        
        # Update image tags in manifests
        sed -i "s|api-server:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.ref_name }}|g" release-artifacts/*.yaml
        sed -i "s|customer-frontend:latest|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}|g" release-artifacts/*.yaml
        
        # Create deployment script
        cat > release-artifacts/deploy-release.sh << 'EOF'
        #!/bin/bash
        echo "🚀 Deploying Release ${{ github.ref_name }}"
        
        # Deploy MongoDB
        kubectl apply -f mongodb-*.yaml
        
        # Deploy Kafka
        kubectl apply -f kafka-*.yaml
        
        # Deploy API Server
        kubectl apply -f api-server-*.yaml
        
        # Deploy Frontend
        kubectl apply -f frontend-*.yaml
        
        # Deploy Autoscaling
        kubectl apply -f *-hpa.yaml
        
        echo "✅ Release ${{ github.ref_name }} deployed successfully!"
        EOF
        
        chmod +x release-artifacts/deploy-release.sh

    - name: Create Helm chart
      run: |
        mkdir -p release-artifacts/helm-chart/templates
        
        # Create Chart.yaml
        cat > release-artifacts/helm-chart/Chart.yaml << EOF
        apiVersion: v2
        name: unity-stack
        description: MongoDB API Server with Kafka and Frontend
        type: application
        version: ${{ github.ref_name }}
        appVersion: "${{ github.ref_name }}"
        EOF
        
        # Create values.yaml
        cat > release-artifacts/helm-chart/values.yaml << EOF
        image:
          registry: ${{ env.REGISTRY }}
          repository: ${{ env.IMAGE_NAME }}
          tag: ${{ github.ref_name }}
        
        apiServer:
          replicas: 2
          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "250m"
        
        frontend:
          replicas: 2
          resources:
            requests:
              memory: "128Mi"
              cpu: "50m"
            limits:
              memory: "256Mi"
              cpu: "100m"
        
        mongodb:
          replicas: 1
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
        
        kafka:
          replicas: 1
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
        EOF

    - name: Upload artifacts to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./release-artifacts
        asset_name: release-artifacts-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  security-scan-release:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: build-release-images

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api-server:${{ github.ref_name }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

    - name: Run Trivy vulnerability scanner for frontend
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/frontend:${{ github.ref_name }}
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-release-images, generate-artifacts, security-scan-release]
    if: always()

    steps:
    - name: Notify release completion
      run: |
        if [ "${{ needs.build-release-images.result }}" == "success" ] && [ "${{ needs.generate-artifacts.result }}" == "success" ] && [ "${{ needs.security-scan-release.result }}" == "success" ]; then
          echo "✅ Release ${{ github.ref_name }} completed successfully!"
          echo "📦 Images pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "📋 Release artifacts generated"
          echo "🔒 Security scan passed"
        else
          echo "❌ Release ${{ github.ref_name }} failed!"
          exit 1
        fi
