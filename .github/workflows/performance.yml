name: Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 3 * * 0' # Weekly on Sunday at 3 AM

jobs:
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000/health || exit 1

    - name: Install Artillery
      run: npm install -g artillery

    - name: Create load test configuration
      run: |
        cat > load-test.yml << 'EOF'
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 60
              arrivalRate: 10
              name: "Warm up"
            - duration: 120
              arrivalRate: 50
              name: "Ramp up load"
            - duration: 300
              arrivalRate: 100
              name: "Sustained load"
            - duration: 60
              arrivalRate: 200
              name: "Spike test"
          defaults:
            headers:
              Content-Type: "application/json"
        
        scenarios:
          - name: "Health check"
            weight: 20
            flow:
              - get:
                  url: "/health"
        
          - name: "API endpoints"
            weight: 80
            flow:
              - get:
                  url: "/api/users"
              - post:
                  url: "/api/users"
                  json:
                    name: "Load Test User"
                    email: "loadtest@example.com"
              - get:
                  url: "/api/products"
              - post:
                  url: "/api/products"
                  json:
                    name: "Load Test Product"
                    description: "A product for load testing"
                    price: 99.99
                    category: "electronics"
                    quantity: 100
        EOF

    - name: Run load test
      run: artillery run load-test.yml --output load-test-report.json

    - name: Generate load test report
      run: artillery report load-test-report.json --output load-test-report.html

    - name: Upload load test results
      uses: actions/upload-artifact@v4
      with:
        name: load-test-results
        path: |
          load-test-report.json
          load-test-report.html

  stress-test:
    name: Stress Testing
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application
      run: |
        npm start &
        sleep 10
        curl -f http://localhost:3000/health || exit 1

    - name: Install Artillery
      run: npm install -g artillery

    - name: Create stress test configuration
      run: |
        cat > stress-test.yml << 'EOF'
        config:
          target: 'http://localhost:3000'
          phases:
            - duration: 30
              arrivalRate: 10
              name: "Warm up"
            - duration: 60
              arrivalRate: 100
              name: "Normal load"
            - duration: 120
              arrivalRate: 500
              name: "High load"
            - duration: 60
              arrivalRate: 1000
              name: "Extreme load"
            - duration: 30
              arrivalRate: 2000
              name: "Breaking point"
          defaults:
            headers:
              Content-Type: "application/json"
        
        scenarios:
          - name: "API stress test"
            flow:
              - get:
                  url: "/health"
              - get:
                  url: "/api/users"
              - get:
                  url: "/api/products"
              - post:
                  url: "/api/users"
                  json:
                    name: "Stress Test User {{ $randomString() }}"
                    email: "stresstest{{ $randomString() }}@example.com"
        EOF

    - name: Run stress test
      run: artillery run stress-test.yml --output stress-test-report.json

    - name: Generate stress test report
      run: artillery report stress-test-report.json --output stress-test-report.html

    - name: Upload stress test results
      uses: actions/upload-artifact@v4
      with:
        name: stress-test-results
        path: |
          stress-test-report.json
          stress-test-report.html

  memory-test:
    name: Memory Leak Testing
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build application
      run: npm run build

    - name: Start application with memory monitoring
      run: |
        npm start &
        APP_PID=$!
        echo $APP_PID > app.pid
        
        # Monitor memory for 10 minutes
        for i in {1..60}; do
          ps -p $APP_PID -o pid,ppid,cmd,%mem,%cpu,rss,vsz >> memory-usage.log
          sleep 10
        done

    - name: Analyze memory usage
      run: |
        # Check if memory usage is stable
        tail -n 50 memory-usage.log | awk '{print $6}' | sort -n | tail -1 > max-memory.txt
        MAX_MEMORY=$(cat max-memory.txt)
        echo "Maximum memory usage: ${MAX_MEMORY}KB"
        
        # Check for memory leaks (memory should not continuously increase)
        awk '{print $6}' memory-usage.log | tail -n 30 > recent-memory.txt
        python3 -c "
        import sys
        data = [int(line.strip()) for line in open('recent-memory.txt')]
        if len(data) > 10:
            first_half = data[:len(data)//2]
            second_half = data[len(data)//2:]
            first_avg = sum(first_half) / len(first_half)
            second_avg = sum(second_half) / len(second_half)
            increase = (second_avg - first_avg) / first_avg * 100
            print(f'Memory increase: {increase:.2f}%')
            if increase > 50:
                print('Potential memory leak detected!')
                sys.exit(1)
            else:
                print('Memory usage is stable')
        "

    - name: Upload memory test results
      uses: actions/upload-artifact@v4
      with:
        name: memory-test-results
        path: |
          memory-usage.log
          max-memory.txt
          recent-memory.txt

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [load-test, stress-test, memory-test]
    if: always()

    steps:
    - name: Download load test results
      uses: actions/download-artifact@v5
      with:
        name: load-test-results
        path: ./load-test-results

    - name: Download stress test results
      uses: actions/download-artifact@v5
      with:
        name: stress-test-results
        path: ./stress-test-results

    - name: Download memory test results
      uses: actions/download-artifact@v5
      with:
        name: memory-test-results
        path: ./memory-test-results

    - name: Performance test summary
      run: |
        echo "üìä Performance Test Summary"
        echo "=========================="
        echo "Load Test: ${{ needs.load-test.result }}"
        echo "Stress Test: ${{ needs.stress-test.result }}"
        echo "Memory Test: ${{ needs.memory-test.result }}"
        
        if [ "${{ needs.load-test.result }}" == "success" ] && [ "${{ needs.stress-test.result }}" == "success" ] && [ "${{ needs.memory-test.result }}" == "success" ]; then
          echo "‚úÖ All performance tests passed!"
        else
          echo "‚ùå Some performance tests failed!"
          exit 1
        fi
